These are the rules for updating the states of the gas particles as taken from Jensen's book:

Using the following model:

-------------
| 3 | 2 | 1 |
-------------
| 4 | 8 | 0 |
-------------
| 5 | 6 | 7 |
-------------

Same as in Jensen's book but 8 corresponds to the particle we are looking at.

###############################################################################

Josh's original idea for a solution (unoptimised and probably terrible)

>Consider a force vector, F_i,j, acting on particle X, which is dependendent on the occupation states of the surrounding cells
Define the directions as 
  i -->
  j |
	|
	V
> The maximum magnitude of the force vector in either direction is unity
> Force would be stored in a separate lattice

Step 1:
> Look at all neighbouring cells. Add the following values to the force vector:
Cell	i	j
0	-1	0
1	-1	1
2	0	1
3	1	1
4	1	0
5	1	-1
6	0	-1
7	-1	-1	

>Sum total values based on number of remaining cells
>Normalise

Step 2:
>After completing Step 1 for all cells, calculate the new position of all particles, disregarding other particles in the system (for the time being)
>Now, let us look for conflicts. If a value of a cell is 2, we need to move particles back. 

Step 3:
>Where would there be 2 or more particles? If 2+ particles are going to occup a site, move all particles back.

Step 4:
>Repeat
>Iterate until all sites have a value of 1.

Step 5:
>For all future steps, particle forces are kept constant until they encounter more particles when their force changes

Some preliminary thoughts:
This would be fairly quick for smaller systems with fewer particles.
As we increase the number of particles, the number of calculations would probably increase exponentially.
As we increase the dimensions of the system, the number of calculations will increase as we have to 'check' more cells.
This won't change too much if we don't increase the number of particles in the overall system.

This would be slow, trying to think of another way to do it.

###############################################################################

New stuff from MIT article (and I assume the book it references)
This uses a hexagonal model but I tried adapting it for 2D. It gave me a headache trying to think of how to work it.

Do something similar for the first instance, but then we only consider collisions

