These are the rules for updating the states of the gas particles as taken from Jensen's book:

Using the following model:

-------------
| 3 | 2 | 1 |
-------------
| 4 | 8 | 0 |
-------------
| 5 | 6 | 7 |
-------------

Same as in Jensen's book but 8 corresponds to the particle we are looking at.

###############################################################################

Josh's original idea for a solution (unoptimised and probably terrible)

>Consider a force vector, F_i,j, acting on particle X, which is dependendent on the occupation states of the surrounding cells
Define the directions as 
  i -->
  j |
	|
	V
> The maximum magnitude of the force vector in either direction is unity
> Force would be stored in a separate lattice

Step 1:
> Look at all neighbouring cells. Add the following values to the force vector:
Cell	i	j
0	-1	0
1	-1	1
2	0	1
3	1	1
4	1	0
5	1	-1
6	0	-1
7	-1	-1	

>Sum total values based on number of remaining cells
>Normalise

Step 2:
>After completing Step 1 for all cells, calculate the new position of all particles, disregarding other particles in the system (for the time being)
>Now, let us look for conflicts. If a value of a cell is 2, we need to move particles back. 

Step 3:
>Where would there be 2 or more particles? If 2+ particles are going to occup a site, move all particles back.

Step 4:
>Repeat
>Iterate until all sites have a value of 1.

Step 5:
>For all future steps, particle forces are kept constant until they encounter more particles when their force changes

Some preliminary thoughts:
This would be fairly quick for smaller systems with fewer particles.
As we increase the number of particles, the number of calculations would probably increase exponentially.
As we increase the dimensions of the system, the number of calculations will increase as we have to 'check' more cells.
This won't change too much if we don't increase the number of particles in the overall system.

This would be slow, trying to think of another way to do it.

###############################################################################

New stuff from MIT article (and I assume the book it references)
This uses a hexagonal model but I tried adapting it for 2D. It gave me a headache trying to think of how to work it.
This may be identical to Jensen's model, I really can't read FORTRAN, no idea.

Do something similar for the first instance, but then we only consider collisions

Using the model listed above, we consider the following vectors:

###
vector(z) -> The occupation state, corresponds to a boolean value of 1 or 0
For a point i,j in the overal lattice we use the following:
vector(z_i,j) = (z_0,z_1,...,z_8) , where z_k (k = 0,1,...,8) simply refers to whether that point in the lattice is occupied.
>Implmentation:
This is already handled by Lat elem, can modify the ideas shown here to work with the code instead of having vectors at each point.

Examples:
-------------			-------------
| 0 | 1 | 0 |			| 0 | 0 | 0 |
-------------			-------------
| 1 | 0 | 1 |			| 0 | 1 | 0 |
-------------			-------------
| 0 | 1 | 0 |			| 0 | 0 | 0 |
-------------			-------------
	  A						  B

A) z = (1,0,1,0,1,0,1,0,0)
B) z = (0,0,0,0,0,0,0,0,1)
etc

###
vector(n) -> Describes direction in which a given particle is heading
n = (x,y) st x,y = {-1,0,1}
Calculate inititially, then update using the function:
n_i+1 = n_i + delta(n_i)

For initial calculation:
Look at z. For each occupation value of z_k around a point we specify n = (x,y) as the following
z_k (occupied)	n_x (add to) n_y (add to)
0	-1	0
1	-1	1
2	-0	1
3	1	1
4	1	0
5	1	-1
6	0	-1
7	-1	-1
8	0	0

(8 is a special case, corresponds to initial stationary particle with no movement).

Example:
-------------
| 1 | 1 | 0 |
-------------
| 1 | 1 | 0 |
-------------
| 0 | 0 | 0 |			
-------------	

For the central point, we take

n_x = 0 + 1 + 1 = 2
n_y = 1 + 1 + 0 = 2
Therefore, normalised:
n = (1,1)
(Particle goes diagonal downwards towards point 7)

>Implementation:
We need a new way of having vectors at each lattice element which is occupied.
Alternative we do some warped method with setting the occupation value to include n.
Eg: 0 - unoccupied
1 - occupied, not moving
101 - occupied, moving towards 1
201 - occupied, moving towards 2
etc
We could easily start with particles moving etc.

###
vector(delta) -> The collision operator


So how do we iterate the data?

Step 1:
>Look at each point, if it's occupied, calculate n value for that point else move onto the next point.
>For an occupied point, look at what neighbours are occupied,  and calculate the value of n based on steps given above.

Step 2:
>First iteration. t = t + 1
>Use the value of n to move each particle. To do this, we consider the following.
>>Scan through all points, looking at all neighbours. (get latelem)
>>If neighbours are going to cause a collision on the central point then we adjust the values of n accordingly such that they are now zero?
DOUBLE CHECK
>>Probably no heirarchy in how particles can or can't move.

Step 3:
>Move points across

Step 4:
>Repeat 2 and 3

Some preliminary thoughts:
Overall probably quicker, especially for systems with more particles.